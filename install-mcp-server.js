#!/usr/bin/env node

/**
 * Juan Note MCP Server Installation Script
 *
 * This script installs the Juan Note MCP server to make it accessible
 * to LLM clients after the Juan Note app is installed.
 */

import { execSync } from "child_process";
import { existsSync, mkdirSync, copyFileSync, writeFileSync } from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log("üöÄ Installing Juan Note MCP Server...\n");

// Determine installation directory
const getInstallDir = () => {
  const platform = process.platform;
  const homeDir = process.env.HOME || process.env.USERPROFILE;

  if (!homeDir) {
    throw new Error("Could not determine home directory");
  }

  switch (platform) {
    case "win32":
      return join(homeDir, "AppData", "Local", "JuanNote", "mcp-server");
    case "darwin":
      return join(
        homeDir,
        "Library",
        "Application Support",
        "JuanNote",
        "mcp-server"
      );
    case "linux":
      return join(homeDir, ".juan-note", "mcp-server");
    default:
      return join(homeDir, ".juan-note", "mcp-server");
  }
};

const installDir = getInstallDir();
console.log(`üìÅ Installation directory: ${installDir}`);

// Create installation directory
if (!existsSync(installDir)) {
  console.log("üìÅ Creating installation directory...");
  mkdirSync(installDir, { recursive: true });
}

// Copy MCP server files
console.log("üìã Copying MCP server files...");
const mcpServerDir = join(__dirname, "mcp-server");

// Create subdirectories
const subdirs = ["managers", "security", "config", "streaming", "realtime"];
for (const subdir of subdirs) {
  const subdirPath = join(installDir, subdir);
  if (!existsSync(subdirPath)) {
    mkdirSync(subdirPath, { recursive: true });
  }
}

const filesToCopy = [
  { src: "dist/index.js", dest: "index.js" },
  { src: "dist/managers/noteManager.js", dest: "managers/noteManager.js" },
  { src: "dist/security/accessControl.js", dest: "security/accessControl.js" },
  { src: "dist/config/configLoader.js", dest: "config/configLoader.js" },
  {
    src: "dist/streaming/streamHandler.js",
    dest: "streaming/streamHandler.js",
  },
  { src: "dist/realtime/noteWatcher.js", dest: "realtime/noteWatcher.js" },
  { src: "package.json", dest: "package.json" },
  { src: "package-lock.json", dest: "package-lock.json" },
  { src: "config/mcp-config.json", dest: "config/mcp-config.json" },
];

for (const { src, dest } of filesToCopy) {
  const srcPath = join(mcpServerDir, src);
  const destPath = join(installDir, dest);

  if (existsSync(srcPath)) {
    copyFileSync(srcPath, destPath);
    console.log(`  ‚úÖ ${src} ‚Üí ${dest}`);
  } else {
    console.log(`  ‚ö†Ô∏è  ${src} not found, skipping`);
  }
}

// Install dependencies
console.log("üì¶ Installing dependencies...");
try {
  execSync("npm install --production", { cwd: installDir, stdio: "inherit" });
  console.log("  ‚úÖ Dependencies installed");
} catch (error) {
  console.log("  ‚ùå Failed to install dependencies:", error.message);
  console.log("  ‚ÑπÔ∏è  You may need to run: npm install --production");
}

// Create a launcher script
console.log("üìù Creating launcher script...");
const launcherScript = `#!/usr/bin/env node

// Juan Note MCP Server Launcher
// Generated by install-mcp-server.js

import { spawn } from 'child_process';
import { dirname, join } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const serverPath = join(__dirname, 'index.js');

console.log('Starting Juan Note MCP Server...');
console.log('Server path:', serverPath);
console.log('Make sure Juan Note is running on localhost:1420');
console.log('');

const server = spawn('node', [serverPath], {
  stdio: 'inherit',
  cwd: __dirname
});

server.on('error', (error) => {
  console.error('Failed to start MCP server:', error.message);
  process.exit(1);
});

server.on('exit', (code) => {
  console.log(\`MCP server exited with code \${code}\`);
  process.exit(code);
});
`;

writeFileSync(join(installDir, "juan-note-mcp.js"), launcherScript);
console.log("  ‚úÖ juan-note-mcp.js");

// Make launcher executable (Unix-like systems)
if (process.platform !== "win32") {
  try {
    execSync(`chmod +x "${join(installDir, "juan-note-mcp.js")}"`);
    console.log("  ‚úÖ Made launcher executable");
  } catch (error) {
    console.log("  ‚ö†Ô∏è  Could not make launcher executable");
  }
}

// Create desktop shortcut (optional)
if (process.platform === "darwin") {
  console.log("üçé Creating macOS application shortcut...");
  const appDir = join(
    process.env.HOME,
    "Applications",
    "Juan Note MCP Server.app"
  );
  // Note: Creating .app bundles requires more complex setup
  console.log(
    "  ‚ÑπÔ∏è  To create a proper macOS app, use the launcher script manually"
  );
}

// Installation complete
console.log("\n‚úÖ Juan Note MCP Server installation complete!");
console.log("");
console.log("üìñ Usage:");
console.log(`  Run: node "${join(installDir, "juan-note-mcp.js")}"`);
console.log("  Or:  node juan-note-mcp.js (from installation directory)");
console.log("");
console.log("üîó Configure your LLM client to use:");
console.log(`  Command: ["node", "${join(installDir, "juan-note-mcp.js")}"]`);
console.log("");
console.log(
  "üìã Make sure Juan Note is running before starting the MCP server!"
);
console.log(
  "   The MCP server needs to communicate with Juan Note on localhost:1420."
);
